//-------------------------------------------------------------------------------------------------
//
// Copyright (c) Ryan Alasandro
//
// Static Library: Core Graphics
//
// File: Graphics/CDX12Data.h
//
//-------------------------------------------------------------------------------------------------

#ifndef CDX12DATA_H
#define CDX12DATA_H

#include "CGraphicsData.h"
#include <d3d12.h>
#include <cwchar>

namespace Graphics
{
	//-----------------------------------------------------------------------------------------------
	// Format DXGI.
	//-----------------------------------------------------------------------------------------------

	inline DXGI_FORMAT ConvertGFXFormatToDXGI(GFX_FORMAT format)
	{
		switch(format)
		{
			case GFX_FORMAT_UNKNOWN:
				return DXGI_FORMAT_UNKNOWN;
			case GFX_FORMAT_R32G32B32A32_TYPELESS:
				return DXGI_FORMAT_R32G32B32A32_TYPELESS;
			case GFX_FORMAT_R32G32B32A32_FLOAT:
				return DXGI_FORMAT_R32G32B32A32_FLOAT;
			case GFX_FORMAT_R32G32B32A32_UINT:
				return DXGI_FORMAT_R32G32B32A32_UINT;
			case GFX_FORMAT_R32G32B32A32_SINT:
				return DXGI_FORMAT_R32G32B32A32_SINT;
			case GFX_FORMAT_R32G32B32_TYPELESS:
				return DXGI_FORMAT_R32G32B32_TYPELESS;
			case GFX_FORMAT_R32G32B32_FLOAT:
				return DXGI_FORMAT_R32G32B32_FLOAT;
			case GFX_FORMAT_R32G32B32_UINT:
				return DXGI_FORMAT_R32G32B32_UINT;
			case GFX_FORMAT_R32G32B32_SINT:
				return DXGI_FORMAT_R32G32B32_SINT;
			case GFX_FORMAT_R16G16B16A16_TYPELESS:
				return DXGI_FORMAT_R16G16B16A16_TYPELESS;
			case GFX_FORMAT_R16G16B16A16_FLOAT:
				return DXGI_FORMAT_R16G16B16A16_FLOAT;
			case GFX_FORMAT_R16G16B16A16_UNORM:
				return DXGI_FORMAT_R16G16B16A16_UNORM;
			case GFX_FORMAT_R16G16B16A16_UINT:
				return DXGI_FORMAT_R16G16B16A16_UINT;
			case GFX_FORMAT_R16G16B16A16_SNORM:
				return DXGI_FORMAT_R16G16B16A16_SNORM;
			case GFX_FORMAT_R16G16B16A16_SINT:
				return DXGI_FORMAT_R16G16B16A16_SINT;
			case GFX_FORMAT_R32G32_TYPELESS:
				return DXGI_FORMAT_R32G32_TYPELESS;
			case GFX_FORMAT_R32G32_FLOAT:
				return DXGI_FORMAT_R32G32_FLOAT;
			case GFX_FORMAT_R32G32_UINT:
				return DXGI_FORMAT_R32G32_UINT;
			case GFX_FORMAT_R32G32_SINT:
				return DXGI_FORMAT_R32G32_SINT;
			case GFX_FORMAT_R32G8X24_TYPELESS:
				return DXGI_FORMAT_R32G8X24_TYPELESS;
			case GFX_FORMAT_D32_FLOAT_S8X24_UINT:
				return DXGI_FORMAT_D32_FLOAT_S8X24_UINT;
			case GFX_FORMAT_R32_FLOAT_X8X24_TYPELESS:
				return DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS;
			case GFX_FORMAT_X32_TYPELESS_G8X24_UINT:
				return DXGI_FORMAT_X32_TYPELESS_G8X24_UINT;
			case GFX_FORMAT_R10G10B10A2_TYPELESS:
				return DXGI_FORMAT_R10G10B10A2_TYPELESS;
			case GFX_FORMAT_R10G10B10A2_UNORM:
				return DXGI_FORMAT_R10G10B10A2_UNORM;
			case GFX_FORMAT_R10G10B10A2_UINT:
				return DXGI_FORMAT_R10G10B10A2_UINT;
			case GFX_FORMAT_R11G11B10_FLOAT:
				return DXGI_FORMAT_R11G11B10_FLOAT;
			case GFX_FORMAT_R8G8B8A8_TYPELESS:
				return DXGI_FORMAT_R8G8B8A8_TYPELESS;
			case GFX_FORMAT_R8G8B8A8_UNORM:
				return DXGI_FORMAT_R8G8B8A8_UNORM;
			case GFX_FORMAT_R8G8B8A8_UNORM_SRGB:
				return DXGI_FORMAT_R8G8B8A8_UNORM_SRGB;
			case GFX_FORMAT_R8G8B8A8_UINT:
				return DXGI_FORMAT_R8G8B8A8_UINT;
			case GFX_FORMAT_R8G8B8A8_SNORM:
				return DXGI_FORMAT_R8G8B8A8_SNORM;
			case GFX_FORMAT_R8G8B8A8_SINT:
				return DXGI_FORMAT_R8G8B8A8_SINT;
			case GFX_FORMAT_R16G16_TYPELESS:
				return DXGI_FORMAT_R16G16_TYPELESS;
			case GFX_FORMAT_R16G16_FLOAT:
				return DXGI_FORMAT_R16G16_FLOAT;
			case GFX_FORMAT_R16G16_UNORM:
				return DXGI_FORMAT_R16G16_UNORM;
			case GFX_FORMAT_R16G16_UINT:
				return DXGI_FORMAT_R16G16_UINT;
			case GFX_FORMAT_R16G16_SNORM:
				return DXGI_FORMAT_R16G16_SNORM;
			case GFX_FORMAT_R16G16_SINT:
				return DXGI_FORMAT_R16G16_SINT;
			case GFX_FORMAT_R32_TYPELESS:
				return DXGI_FORMAT_R32_TYPELESS;
			case GFX_FORMAT_D32_FLOAT:
				return DXGI_FORMAT_D32_FLOAT;
			case GFX_FORMAT_R32_FLOAT:
				return DXGI_FORMAT_R32_FLOAT;
			case GFX_FORMAT_R32_UINT:
				return DXGI_FORMAT_R32_UINT;
			case GFX_FORMAT_R32_SINT:
				return DXGI_FORMAT_R32_SINT;
			case GFX_FORMAT_R24G8_TYPELESS:
				return DXGI_FORMAT_R24G8_TYPELESS;
			case GFX_FORMAT_D24_UNORM_S8_UINT:
				return DXGI_FORMAT_D24_UNORM_S8_UINT;
			case GFX_FORMAT_R24_UNORM_X8_TYPELESS:
				return DXGI_FORMAT_R24_UNORM_X8_TYPELESS;
			case GFX_FORMAT_X24_TYPELESS_G8_UINT:
				return DXGI_FORMAT_X24_TYPELESS_G8_UINT;
			case GFX_FORMAT_R8G8_TYPELESS:
				return DXGI_FORMAT_R8G8_TYPELESS;
			case GFX_FORMAT_R8G8_UNORM:
				return DXGI_FORMAT_R8G8_UNORM;
			case GFX_FORMAT_R8G8_UINT:
				return DXGI_FORMAT_R8G8_UINT;
			case GFX_FORMAT_R8G8_SNORM:
				return DXGI_FORMAT_R8G8_SNORM;
			case GFX_FORMAT_R8G8_SINT:
				return DXGI_FORMAT_R8G8_SINT;
			case GFX_FORMAT_R16_TYPELESS:
				return DXGI_FORMAT_R16_TYPELESS;
			case GFX_FORMAT_R16_FLOAT:
				return DXGI_FORMAT_R16_FLOAT;
			case GFX_FORMAT_D16_UNORM:
				return DXGI_FORMAT_D16_UNORM;
			case GFX_FORMAT_R16_UNORM:
				return DXGI_FORMAT_R16_UNORM;
			case GFX_FORMAT_R16_UINT:
				return DXGI_FORMAT_R16_UINT;
			case GFX_FORMAT_R16_SNORM:
				return DXGI_FORMAT_R16_SNORM;
			case GFX_FORMAT_R16_SINT:
				return DXGI_FORMAT_R16_SINT;
			case GFX_FORMAT_R8_TYPELESS:
				return DXGI_FORMAT_R8_TYPELESS;
			case GFX_FORMAT_R8_UNORM:
				return DXGI_FORMAT_R8_UNORM;
			case GFX_FORMAT_R8_UINT:
				return DXGI_FORMAT_R8_UINT;
			case GFX_FORMAT_R8_SNORM:
				return DXGI_FORMAT_R8_SNORM;
			case GFX_FORMAT_R8_SINT:
				return DXGI_FORMAT_R8_SINT;
			case GFX_FORMAT_A8_UNORM:
				return DXGI_FORMAT_A8_UNORM;
			case GFX_FORMAT_R1_UNORM:
				return DXGI_FORMAT_R1_UNORM;
			case GFX_FORMAT_R9G9B9E5_SHAREDEXP:
				return DXGI_FORMAT_R9G9B9E5_SHAREDEXP;
			case GFX_FORMAT_R8G8_B8G8_UNORM:
				return DXGI_FORMAT_R8G8_B8G8_UNORM;
			case GFX_FORMAT_G8R8_G8B8_UNORM:
				return DXGI_FORMAT_G8R8_G8B8_UNORM;
			case GFX_FORMAT_BC1_TYPELESS:
				return DXGI_FORMAT_BC1_TYPELESS;
			case GFX_FORMAT_BC1_UNORM:
				return DXGI_FORMAT_BC1_UNORM;
			case GFX_FORMAT_BC1_UNORM_SRGB:
				return DXGI_FORMAT_BC1_UNORM_SRGB;
			case GFX_FORMAT_BC2_TYPELESS:
				return DXGI_FORMAT_BC2_TYPELESS;
			case GFX_FORMAT_BC2_UNORM:
				return DXGI_FORMAT_BC2_UNORM;
			case GFX_FORMAT_BC2_UNORM_SRGB:
				return DXGI_FORMAT_BC2_UNORM_SRGB;
			case GFX_FORMAT_BC3_TYPELESS:
				return DXGI_FORMAT_BC3_TYPELESS;
			case GFX_FORMAT_BC3_UNORM:
				return DXGI_FORMAT_BC3_UNORM;
			case GFX_FORMAT_BC3_UNORM_SRGB:
				return DXGI_FORMAT_BC3_UNORM_SRGB;
			case GFX_FORMAT_BC4_TYPELESS:
				return DXGI_FORMAT_BC4_TYPELESS;
			case GFX_FORMAT_BC4_UNORM:
				return DXGI_FORMAT_BC4_UNORM;
			case GFX_FORMAT_BC4_SNORM:
				return DXGI_FORMAT_BC4_SNORM;
			case GFX_FORMAT_BC5_TYPELESS:
				return DXGI_FORMAT_BC5_TYPELESS;
			case GFX_FORMAT_BC5_UNORM:
				return DXGI_FORMAT_BC5_UNORM;
			case GFX_FORMAT_BC5_SNORM:
				return DXGI_FORMAT_BC5_SNORM;
			case GFX_FORMAT_B5G6R5_UNORM:
				return DXGI_FORMAT_B5G6R5_UNORM;
			case GFX_FORMAT_B5G5R5A1_UNORM:
				return DXGI_FORMAT_B5G5R5A1_UNORM;
			case GFX_FORMAT_B8G8R8A8_UNORM:
				return DXGI_FORMAT_B8G8R8A8_UNORM;
			case GFX_FORMAT_B8G8R8X8_UNORM:
				return DXGI_FORMAT_B8G8R8X8_UNORM;
			case GFX_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
				return DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM;
			case GFX_FORMAT_B8G8R8A8_TYPELESS:
				return DXGI_FORMAT_B8G8R8A8_TYPELESS;
			case GFX_FORMAT_B8G8R8A8_UNORM_SRGB:
				return DXGI_FORMAT_B8G8R8A8_UNORM_SRGB;
			case GFX_FORMAT_B8G8R8X8_TYPELESS:
				return DXGI_FORMAT_B8G8R8X8_TYPELESS;
			case GFX_FORMAT_B8G8R8X8_UNORM_SRGB:
				return DXGI_FORMAT_B8G8R8X8_UNORM_SRGB;
			case GFX_FORMAT_BC6H_TYPELESS:
				return DXGI_FORMAT_BC6H_TYPELESS;
			case GFX_FORMAT_BC6H_UF16:
				return DXGI_FORMAT_BC6H_UF16;
			case GFX_FORMAT_BC6H_SF16:
				return DXGI_FORMAT_BC6H_SF16;
			case GFX_FORMAT_BC7_TYPELESS:
				return DXGI_FORMAT_BC7_TYPELESS;
			case GFX_FORMAT_BC7_UNORM:
				return DXGI_FORMAT_BC7_UNORM;
			case GFX_FORMAT_BC7_UNORM_SRGB:
				return DXGI_FORMAT_BC7_UNORM_SRGB;
			case GFX_FORMAT_AYUV:
				return DXGI_FORMAT_AYUV;
			case GFX_FORMAT_Y410:
				return DXGI_FORMAT_Y410;
			case GFX_FORMAT_Y416:
				return DXGI_FORMAT_Y416;
			case GFX_FORMAT_NV12:
				return DXGI_FORMAT_NV12;
			case GFX_FORMAT_P010:
				return DXGI_FORMAT_P010;
			case GFX_FORMAT_P016:
				return DXGI_FORMAT_P016;
			case GFX_FORMAT_420_OPAQUE:
				return DXGI_FORMAT_420_OPAQUE;
			case GFX_FORMAT_YUY2:
				return DXGI_FORMAT_YUY2;
			case GFX_FORMAT_Y210:
				return DXGI_FORMAT_Y210;
			case GFX_FORMAT_Y216:
				return DXGI_FORMAT_Y216;
			case GFX_FORMAT_NV11:
				return DXGI_FORMAT_NV11;
			case GFX_FORMAT_AI44:
				return DXGI_FORMAT_AI44;
			case GFX_FORMAT_IA44:
				return DXGI_FORMAT_IA44;
			case GFX_FORMAT_P8:
				return DXGI_FORMAT_P8;
			case GFX_FORMAT_A8P8:
				return DXGI_FORMAT_A8P8;
			case GFX_FORMAT_B4G4R4A4_UNORM:
				return DXGI_FORMAT_B4G4R4A4_UNORM;
			case GFX_FORMAT_P208:
				return DXGI_FORMAT_P208;
			case GFX_FORMAT_V208:
				return DXGI_FORMAT_V208;
			case GFX_FORMAT_V408:
				return DXGI_FORMAT_V408;
			case GFX_FORMAT_FORCE_UINT:
				return DXGI_FORMAT_FORCE_UINT;
			default:
				return DXGI_FORMAT_UNKNOWN;
		}
	}

	inline GFX_FORMAT ConvertDXGIFormatToGFX(DXGI_FORMAT format)
	{
		switch(format)
		{
			case DXGI_FORMAT_UNKNOWN:
				return GFX_FORMAT_UNKNOWN;
			case DXGI_FORMAT_R32G32B32A32_TYPELESS:
				return GFX_FORMAT_R32G32B32A32_TYPELESS;
			case DXGI_FORMAT_R32G32B32A32_FLOAT:
				return GFX_FORMAT_R32G32B32A32_FLOAT;
			case DXGI_FORMAT_R32G32B32A32_UINT:
				return GFX_FORMAT_R32G32B32A32_UINT;
			case DXGI_FORMAT_R32G32B32A32_SINT:
				return GFX_FORMAT_R32G32B32A32_SINT;
			case DXGI_FORMAT_R32G32B32_TYPELESS:
				return GFX_FORMAT_R32G32B32_TYPELESS;
			case DXGI_FORMAT_R32G32B32_FLOAT:
				return GFX_FORMAT_R32G32B32_FLOAT;
			case DXGI_FORMAT_R32G32B32_UINT:
				return GFX_FORMAT_R32G32B32_UINT;
			case DXGI_FORMAT_R32G32B32_SINT:
				return GFX_FORMAT_R32G32B32_SINT;
			case DXGI_FORMAT_R16G16B16A16_TYPELESS:
				return GFX_FORMAT_R16G16B16A16_TYPELESS;
			case DXGI_FORMAT_R16G16B16A16_FLOAT:
				return GFX_FORMAT_R16G16B16A16_FLOAT;
			case DXGI_FORMAT_R16G16B16A16_UNORM:
				return GFX_FORMAT_R16G16B16A16_UNORM;
			case DXGI_FORMAT_R16G16B16A16_UINT:
				return GFX_FORMAT_R16G16B16A16_UINT;
			case DXGI_FORMAT_R16G16B16A16_SNORM:
				return GFX_FORMAT_R16G16B16A16_SNORM;
			case DXGI_FORMAT_R16G16B16A16_SINT:
				return GFX_FORMAT_R16G16B16A16_SINT;
			case DXGI_FORMAT_R32G32_TYPELESS:
				return GFX_FORMAT_R32G32_TYPELESS;
			case DXGI_FORMAT_R32G32_FLOAT:
				return GFX_FORMAT_R32G32_FLOAT;
			case DXGI_FORMAT_R32G32_UINT:
				return GFX_FORMAT_R32G32_UINT;
			case DXGI_FORMAT_R32G32_SINT:
				return GFX_FORMAT_R32G32_SINT;
			case DXGI_FORMAT_R32G8X24_TYPELESS:
				return GFX_FORMAT_R32G8X24_TYPELESS;
			case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
				return GFX_FORMAT_D32_FLOAT_S8X24_UINT;
			case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
				return GFX_FORMAT_R32_FLOAT_X8X24_TYPELESS;
			case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:
				return GFX_FORMAT_X32_TYPELESS_G8X24_UINT;
			case DXGI_FORMAT_R10G10B10A2_TYPELESS:
				return GFX_FORMAT_R10G10B10A2_TYPELESS;
			case DXGI_FORMAT_R10G10B10A2_UNORM:
				return GFX_FORMAT_R10G10B10A2_UNORM;
			case DXGI_FORMAT_R10G10B10A2_UINT:
				return GFX_FORMAT_R10G10B10A2_UINT;
			case DXGI_FORMAT_R11G11B10_FLOAT:
				return GFX_FORMAT_R11G11B10_FLOAT;
			case DXGI_FORMAT_R8G8B8A8_TYPELESS:
				return GFX_FORMAT_R8G8B8A8_TYPELESS;
			case DXGI_FORMAT_R8G8B8A8_UNORM:
				return GFX_FORMAT_R8G8B8A8_UNORM;
			case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
				return GFX_FORMAT_R8G8B8A8_UNORM_SRGB;
			case DXGI_FORMAT_R8G8B8A8_UINT:
				return GFX_FORMAT_R8G8B8A8_UINT;
			case DXGI_FORMAT_R8G8B8A8_SNORM:
				return GFX_FORMAT_R8G8B8A8_SNORM;
			case DXGI_FORMAT_R8G8B8A8_SINT:
				return GFX_FORMAT_R8G8B8A8_SINT;
			case DXGI_FORMAT_R16G16_TYPELESS:
				return GFX_FORMAT_R16G16_TYPELESS;
			case DXGI_FORMAT_R16G16_FLOAT:
				return GFX_FORMAT_R16G16_FLOAT;
			case DXGI_FORMAT_R16G16_UNORM:
				return GFX_FORMAT_R16G16_UNORM;
			case DXGI_FORMAT_R16G16_UINT:
				return GFX_FORMAT_R16G16_UINT;
			case DXGI_FORMAT_R16G16_SNORM:
				return GFX_FORMAT_R16G16_SNORM;
			case DXGI_FORMAT_R16G16_SINT:
				return GFX_FORMAT_R16G16_SINT;
			case DXGI_FORMAT_R32_TYPELESS:
				return GFX_FORMAT_R32_TYPELESS;
			case DXGI_FORMAT_D32_FLOAT:
				return GFX_FORMAT_D32_FLOAT;
			case DXGI_FORMAT_R32_FLOAT:
				return GFX_FORMAT_R32_FLOAT;
			case DXGI_FORMAT_R32_UINT:
				return GFX_FORMAT_R32_UINT;
			case DXGI_FORMAT_R32_SINT:
				return GFX_FORMAT_R32_SINT;
			case DXGI_FORMAT_R24G8_TYPELESS:
				return GFX_FORMAT_R24G8_TYPELESS;
			case DXGI_FORMAT_D24_UNORM_S8_UINT:
				return GFX_FORMAT_D24_UNORM_S8_UINT;
			case DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
				return GFX_FORMAT_R24_UNORM_X8_TYPELESS;
			case DXGI_FORMAT_X24_TYPELESS_G8_UINT:
				return GFX_FORMAT_X24_TYPELESS_G8_UINT;
			case DXGI_FORMAT_R8G8_TYPELESS:
				return GFX_FORMAT_R8G8_TYPELESS;
			case DXGI_FORMAT_R8G8_UNORM:
				return GFX_FORMAT_R8G8_UNORM;
			case DXGI_FORMAT_R8G8_UINT:
				return GFX_FORMAT_R8G8_UINT;
			case DXGI_FORMAT_R8G8_SNORM:
				return GFX_FORMAT_R8G8_SNORM;
			case DXGI_FORMAT_R8G8_SINT:
				return GFX_FORMAT_R8G8_SINT;
			case DXGI_FORMAT_R16_TYPELESS:
				return GFX_FORMAT_R16_TYPELESS;
			case DXGI_FORMAT_R16_FLOAT:
				return GFX_FORMAT_R16_FLOAT;
			case DXGI_FORMAT_D16_UNORM:
				return GFX_FORMAT_D16_UNORM;
			case DXGI_FORMAT_R16_UNORM:
				return GFX_FORMAT_R16_UNORM;
			case DXGI_FORMAT_R16_UINT:
				return GFX_FORMAT_R16_UINT;
			case DXGI_FORMAT_R16_SNORM:
				return GFX_FORMAT_R16_SNORM;
			case DXGI_FORMAT_R16_SINT:
				return GFX_FORMAT_R16_SINT;
			case DXGI_FORMAT_R8_TYPELESS:
				return GFX_FORMAT_R8_TYPELESS;
			case DXGI_FORMAT_R8_UNORM:
				return GFX_FORMAT_R8_UNORM;
			case DXGI_FORMAT_R8_UINT:
				return GFX_FORMAT_R8_UINT;
			case DXGI_FORMAT_R8_SNORM:
				return GFX_FORMAT_R8_SNORM;
			case DXGI_FORMAT_R8_SINT:
				return GFX_FORMAT_R8_SINT;
			case DXGI_FORMAT_A8_UNORM:
				return GFX_FORMAT_A8_UNORM;
			case DXGI_FORMAT_R1_UNORM:
				return GFX_FORMAT_R1_UNORM;
			case DXGI_FORMAT_R9G9B9E5_SHAREDEXP:
				return GFX_FORMAT_R9G9B9E5_SHAREDEXP;
			case DXGI_FORMAT_R8G8_B8G8_UNORM:
				return GFX_FORMAT_R8G8_B8G8_UNORM;
			case DXGI_FORMAT_G8R8_G8B8_UNORM:
				return GFX_FORMAT_G8R8_G8B8_UNORM;
			case DXGI_FORMAT_BC1_TYPELESS:
				return GFX_FORMAT_BC1_TYPELESS;
			case DXGI_FORMAT_BC1_UNORM:
				return GFX_FORMAT_BC1_UNORM;
			case DXGI_FORMAT_BC1_UNORM_SRGB:
				return GFX_FORMAT_BC1_UNORM_SRGB;
			case DXGI_FORMAT_BC2_TYPELESS:
				return GFX_FORMAT_BC2_TYPELESS;
			case DXGI_FORMAT_BC2_UNORM:
				return GFX_FORMAT_BC2_UNORM;
			case DXGI_FORMAT_BC2_UNORM_SRGB:
				return GFX_FORMAT_BC2_UNORM_SRGB;
			case DXGI_FORMAT_BC3_TYPELESS:
				return GFX_FORMAT_BC3_TYPELESS;
			case DXGI_FORMAT_BC3_UNORM:
				return GFX_FORMAT_BC3_UNORM;
			case DXGI_FORMAT_BC3_UNORM_SRGB:
				return GFX_FORMAT_BC3_UNORM_SRGB;
			case DXGI_FORMAT_BC4_TYPELESS:
				return GFX_FORMAT_BC4_TYPELESS;
			case DXGI_FORMAT_BC4_UNORM:
				return GFX_FORMAT_BC4_UNORM;
			case DXGI_FORMAT_BC4_SNORM:
				return GFX_FORMAT_BC4_SNORM;
			case DXGI_FORMAT_BC5_TYPELESS:
				return GFX_FORMAT_BC5_TYPELESS;
			case DXGI_FORMAT_BC5_UNORM:
				return GFX_FORMAT_BC5_UNORM;
			case DXGI_FORMAT_BC5_SNORM:
				return GFX_FORMAT_BC5_SNORM;
			case DXGI_FORMAT_B5G6R5_UNORM:
				return GFX_FORMAT_B5G6R5_UNORM;
			case DXGI_FORMAT_B5G5R5A1_UNORM:
				return GFX_FORMAT_B5G5R5A1_UNORM;
			case DXGI_FORMAT_B8G8R8A8_UNORM:
				return GFX_FORMAT_B8G8R8A8_UNORM;
			case DXGI_FORMAT_B8G8R8X8_UNORM:
				return GFX_FORMAT_B8G8R8X8_UNORM;
			case DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
				return GFX_FORMAT_R10G10B10_XR_BIAS_A2_UNORM;
			case DXGI_FORMAT_B8G8R8A8_TYPELESS:
				return GFX_FORMAT_B8G8R8A8_TYPELESS;
			case DXGI_FORMAT_B8G8R8A8_UNORM_SRGB:
				return GFX_FORMAT_B8G8R8A8_UNORM_SRGB;
			case DXGI_FORMAT_B8G8R8X8_TYPELESS:
				return GFX_FORMAT_B8G8R8X8_TYPELESS;
			case DXGI_FORMAT_B8G8R8X8_UNORM_SRGB:
				return GFX_FORMAT_B8G8R8X8_UNORM_SRGB;
			case DXGI_FORMAT_BC6H_TYPELESS:
				return GFX_FORMAT_BC6H_TYPELESS;
			case DXGI_FORMAT_BC6H_UF16:
				return GFX_FORMAT_BC6H_UF16;
			case DXGI_FORMAT_BC6H_SF16:
				return GFX_FORMAT_BC6H_SF16;
			case DXGI_FORMAT_BC7_TYPELESS:
				return GFX_FORMAT_BC7_TYPELESS;
			case DXGI_FORMAT_BC7_UNORM:
				return GFX_FORMAT_BC7_UNORM;
			case DXGI_FORMAT_BC7_UNORM_SRGB:
				return GFX_FORMAT_BC7_UNORM_SRGB;
			case DXGI_FORMAT_AYUV:
				return GFX_FORMAT_AYUV;
			case DXGI_FORMAT_Y410:
				return GFX_FORMAT_Y410;
			case DXGI_FORMAT_Y416:
				return GFX_FORMAT_Y416;
			case DXGI_FORMAT_NV12:
				return GFX_FORMAT_NV12;
			case DXGI_FORMAT_P010:
				return GFX_FORMAT_P010;
			case DXGI_FORMAT_P016:
				return GFX_FORMAT_P016;
			case DXGI_FORMAT_420_OPAQUE:
				return GFX_FORMAT_420_OPAQUE;
			case DXGI_FORMAT_YUY2:
				return GFX_FORMAT_YUY2;
			case DXGI_FORMAT_Y210:
				return GFX_FORMAT_Y210;
			case DXGI_FORMAT_Y216:
				return GFX_FORMAT_Y216;
			case DXGI_FORMAT_NV11:
				return GFX_FORMAT_NV11;
			case DXGI_FORMAT_AI44:
				return GFX_FORMAT_AI44;
			case DXGI_FORMAT_IA44:
				return GFX_FORMAT_IA44;
			case DXGI_FORMAT_P8:
				return GFX_FORMAT_P8;
			case DXGI_FORMAT_A8P8:
				return GFX_FORMAT_A8P8;
			case DXGI_FORMAT_B4G4R4A4_UNORM:
				return GFX_FORMAT_B4G4R4A4_UNORM;
			case DXGI_FORMAT_P208:
				return GFX_FORMAT_P208;
			case DXGI_FORMAT_V208:
				return GFX_FORMAT_V208;
			case DXGI_FORMAT_V408:
				return GFX_FORMAT_V408;
			case DXGI_FORMAT_FORCE_UINT:
				return GFX_FORMAT_FORCE_UINT;
			default:
				return GFX_FORMAT_UNKNOWN;
		}
	}

	//-----------------------------------------------------------------------------------------------
	// Filter.
	//-----------------------------------------------------------------------------------------------

	inline D3D12_FILTER ConvertGFXFilterToD3D12(GFX_FILTER filter)
	{
		switch(filter)
		{
			case GFX_FILTER_MIN_MAG_MIP_POINT:
				return D3D12_FILTER_MIN_MAG_MIP_POINT;
			case GFX_FILTER_MIN_MAG_POINT_MIP_LINEAR:
				return D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR;
			case GFX_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT:
				return D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT;
			case GFX_FILTER_MIN_POINT_MAG_MIP_LINEAR:
				return D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR;
			case GFX_FILTER_MIN_LINEAR_MAG_MIP_POINT:
				return D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT;
			case GFX_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR:
				return D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
			case GFX_FILTER_MIN_MAG_LINEAR_MIP_POINT:
				return D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT;
			case GFX_FILTER_MIN_MAG_MIP_LINEAR:
				return D3D12_FILTER_MIN_MAG_MIP_LINEAR;
			case GFX_FILTER_ANISOTROPIC:
				return D3D12_FILTER_ANISOTROPIC;
			case GFX_FILTER_COMPARISON_MIN_MAG_MIP_POINT:
				return D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT;
			case GFX_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR:
				return D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR;
			case GFX_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT:
				return D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT;
			case GFX_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR:
				return D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR;
			case GFX_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT:
				return D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT;
			case GFX_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR:
				return D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
			case GFX_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT:
				return D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
			case GFX_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR:
				return D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR;
			case GFX_FILTER_COMPARISON_ANISOTROPIC:
				return D3D12_FILTER_COMPARISON_ANISOTROPIC;
			case GFX_FILTER_MINIMUM_MIN_MAG_MIP_POINT:
				return D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT;
			case GFX_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR:
				return D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR;
			case GFX_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT:
				return D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT;
			case GFX_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR:
				return D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR;
			case GFX_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT:
				return D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT;
			case GFX_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR:
				return D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
			case GFX_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT:
				return D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT;
			case GFX_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR:
				return D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR;
			case GFX_FILTER_MINIMUM_ANISOTROPIC:
				return D3D12_FILTER_MINIMUM_ANISOTROPIC;
			case GFX_FILTER_MAXIMUM_MIN_MAG_MIP_POINT:
				return D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT;
			case GFX_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR:
				return D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR;
			case GFX_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT:
				return D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT;
			case GFX_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR:
				return D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR;
			case GFX_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT:
				return D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT;
			case GFX_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR:
				return D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
			case GFX_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT:
				return D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT;
			case GFX_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR:
				return D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR;
			case GFX_FILTER_MAXIMUM_ANISOTROPIC:
				return D3D12_FILTER_MAXIMUM_ANISOTROPIC;
			default:
				return D3D12_FILTER_MIN_MAG_MIP_POINT;
		}
	}

	inline GFX_FILTER ConvertD3D12FilterToGFX(D3D12_FILTER filter)
	{
		switch(filter)
		{
			case D3D12_FILTER_MIN_MAG_MIP_POINT:
				return GFX_FILTER_MIN_MAG_MIP_POINT;
			case D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR:
				return GFX_FILTER_MIN_MAG_POINT_MIP_LINEAR;
			case D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT:
				return GFX_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT;
			case D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR:
				return GFX_FILTER_MIN_POINT_MAG_MIP_LINEAR;
			case D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT:
				return GFX_FILTER_MIN_LINEAR_MAG_MIP_POINT;
			case D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR:
				return GFX_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
			case D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT:
				return GFX_FILTER_MIN_MAG_LINEAR_MIP_POINT;
			case D3D12_FILTER_MIN_MAG_MIP_LINEAR:
				return GFX_FILTER_MIN_MAG_MIP_LINEAR;
			case D3D12_FILTER_ANISOTROPIC:
				return GFX_FILTER_ANISOTROPIC;
			case D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT:
				return GFX_FILTER_COMPARISON_MIN_MAG_MIP_POINT;
			case D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR:
				return GFX_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR;
			case D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT:
				return GFX_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT;
			case D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR:
				return GFX_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR;
			case D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT:
				return GFX_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT;
			case D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR:
				return GFX_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
			case D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT:
				return GFX_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
			case D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR:
				return GFX_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR;
			case D3D12_FILTER_COMPARISON_ANISOTROPIC:
				return GFX_FILTER_COMPARISON_ANISOTROPIC;
			case D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT:
				return GFX_FILTER_MINIMUM_MIN_MAG_MIP_POINT;
			case D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR:
				return GFX_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR;
			case D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT:
				return GFX_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT;
			case D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR:
				return GFX_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR;
			case D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT:
				return GFX_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT;
			case D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR:
				return GFX_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
			case D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT:
				return GFX_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT;
			case D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR:
				return GFX_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR;
			case D3D12_FILTER_MINIMUM_ANISOTROPIC:
				return GFX_FILTER_MINIMUM_ANISOTROPIC;
			case D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT:
				return GFX_FILTER_MAXIMUM_MIN_MAG_MIP_POINT;
			case D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR:
				return GFX_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR;
			case D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT:
				return GFX_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT;
			case D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR:
				return GFX_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR;
			case D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT:
				return GFX_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT;
			case D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR:
				return GFX_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
			case D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT:
				return GFX_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT;
			case D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR:
				return GFX_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR;
			case D3D12_FILTER_MAXIMUM_ANISOTROPIC:
				return GFX_FILTER_MAXIMUM_ANISOTROPIC;
			default:
				return GFX_FILTER_MIN_MAG_MIP_POINT;
		}
	}

	//-----------------------------------------------------------------------------------------------
	// D3D12 view dimensions convertors.
	//-----------------------------------------------------------------------------------------------

	inline D3D12_RTV_DIMENSION ConvertSRVToRTVDimensions(D3D12_SRV_DIMENSION dim)
	{
		switch(dim)
		{
			case D3D12_SRV_DIMENSION_BUFFER:
				return D3D12_RTV_DIMENSION_BUFFER;
			case D3D12_SRV_DIMENSION_TEXTURE1D:
				return D3D12_RTV_DIMENSION_TEXTURE1D;
			case D3D12_SRV_DIMENSION_TEXTURE1DARRAY:
				return D3D12_RTV_DIMENSION_TEXTURE1DARRAY;
			case D3D12_SRV_DIMENSION_TEXTURE2D:
				return D3D12_RTV_DIMENSION_TEXTURE2D;
			case D3D12_SRV_DIMENSION_TEXTURE2DARRAY:
				return D3D12_RTV_DIMENSION_TEXTURE2DARRAY;
			case D3D12_SRV_DIMENSION_TEXTURE2DMS:
				return D3D12_RTV_DIMENSION_TEXTURE2DMS;
			case D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY:
				return D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY;
			case D3D12_SRV_DIMENSION_TEXTURE3D:
				return D3D12_RTV_DIMENSION_TEXTURE3D;
			default:
				return D3D12_RTV_DIMENSION_UNKNOWN;
		}
	}

	inline D3D12_DSV_DIMENSION ConvertSRVToDSVDimensions(D3D12_SRV_DIMENSION dim)
	{
		switch(dim)
		{
			case D3D12_SRV_DIMENSION_TEXTURE1D:
				return D3D12_DSV_DIMENSION_TEXTURE1D;
			case D3D12_SRV_DIMENSION_TEXTURE1DARRAY:
				return D3D12_DSV_DIMENSION_TEXTURE1DARRAY;
			case D3D12_SRV_DIMENSION_TEXTURE2D:
				return D3D12_DSV_DIMENSION_TEXTURE2D;
			case D3D12_SRV_DIMENSION_TEXTURE2DARRAY:
				return D3D12_DSV_DIMENSION_TEXTURE2DARRAY;
			case D3D12_SRV_DIMENSION_TEXTURE2DMS:
				return D3D12_DSV_DIMENSION_TEXTURE2DMS;
			case D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY:
				return D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY;
			default:
				return D3D12_DSV_DIMENSION_UNKNOWN;
		}
	}

	//-----------------------------------------------------------------------------------------------
	// Texture address mode.
	//-----------------------------------------------------------------------------------------------

	inline D3D12_TEXTURE_ADDRESS_MODE ConvertGFXTextureAddessModeToD3D12(TEXTURE_ADDRESS_MODE mode)
	{
		switch(mode)
		{
			case TEXTURE_ADDRESS_MODE_WRAP:
				return D3D12_TEXTURE_ADDRESS_MODE_WRAP;
			case TEXTURE_ADDRESS_MODE_MIRROR:
				return D3D12_TEXTURE_ADDRESS_MODE_MIRROR;
			case TEXTURE_ADDRESS_MODE_CLAMP:
				return D3D12_TEXTURE_ADDRESS_MODE_CLAMP;
			case TEXTURE_ADDRESS_MODE_BORDER:
				return D3D12_TEXTURE_ADDRESS_MODE_BORDER;
			case TEXTURE_ADDRESS_MODE_MIRROR_ONCE:
				return D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE;
			default:
				return D3D12_TEXTURE_ADDRESS_MODE_WRAP;
		}
	}

	inline TEXTURE_ADDRESS_MODE ConvertD3D12TextureAddessModeToGFX(D3D12_TEXTURE_ADDRESS_MODE mode)
	{
		switch(mode)
		{
			case D3D12_TEXTURE_ADDRESS_MODE_WRAP:
				return TEXTURE_ADDRESS_MODE_WRAP;
			case D3D12_TEXTURE_ADDRESS_MODE_MIRROR:
				return TEXTURE_ADDRESS_MODE_MIRROR;
			case D3D12_TEXTURE_ADDRESS_MODE_CLAMP:
				return TEXTURE_ADDRESS_MODE_CLAMP;
			case D3D12_TEXTURE_ADDRESS_MODE_BORDER:
				return TEXTURE_ADDRESS_MODE_BORDER;
			case D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE:
				return TEXTURE_ADDRESS_MODE_MIRROR_ONCE;
			default:
				return TEXTURE_ADDRESS_MODE_WRAP;
		}
	}

	//-----------------------------------------------------------------------------------------------
	// Blend function.
	//-----------------------------------------------------------------------------------------------

	inline D3D12_BLEND ConvertGFXBlendToD3D12(GFX_BLEND blend)
	{
		switch(blend)
		{
			case GFX_BLEND_ZERO:
				return D3D12_BLEND_ZERO;
			case GFX_BLEND_ONE:
				return D3D12_BLEND_ONE;
			case GFX_BLEND_SRC_COLOR:
				return D3D12_BLEND_SRC_COLOR;
			case GFX_BLEND_INV_SRC_COLOR:
				return D3D12_BLEND_INV_SRC_COLOR;
			case GFX_BLEND_SRC_ALPHA:
				return D3D12_BLEND_SRC_ALPHA;
			case GFX_BLEND_INV_SRC_ALPHA:
				return D3D12_BLEND_INV_SRC_ALPHA;
			case GFX_BLEND_DEST_ALPHA:
				return D3D12_BLEND_DEST_ALPHA;
			case GFX_BLEND_INV_DEST_ALPHA:
				return D3D12_BLEND_INV_DEST_ALPHA;
			case GFX_BLEND_DEST_COLOR:
				return D3D12_BLEND_DEST_COLOR;
			case GFX_BLEND_INV_DEST_COLOR:
				return D3D12_BLEND_INV_DEST_COLOR;
			case GFX_BLEND_SRC_ALPHA_SAT:
				return D3D12_BLEND_SRC_ALPHA_SAT;
			case GFX_BLEND_BLEND_FACTOR:
				return D3D12_BLEND_BLEND_FACTOR;
			case GFX_BLEND_INV_BLEND_FACTOR:
				return D3D12_BLEND_INV_BLEND_FACTOR;
			case GFX_BLEND_SRC1_COLOR:
				return D3D12_BLEND_SRC1_COLOR;
			case GFX_BLEND_INV_SRC1_COLOR:
				return D3D12_BLEND_INV_SRC1_COLOR;
			case GFX_BLEND_SRC1_ALPHA:
				return D3D12_BLEND_SRC1_ALPHA;
			case GFX_BLEND_INV_SRC1_ALPHA:
				return D3D12_BLEND_INV_SRC1_ALPHA;
			case GFX_BLEND_ALPHA_FACTOR:
				return D3D12_BLEND_ALPHA_FACTOR;
			case GFX_BLEND_INV_ALPHA_FACTOR:
				return D3D12_BLEND_INV_ALPHA_FACTOR;
			default:
				return D3D12_BLEND_ONE;
		}
	}

	inline D3D12_BLEND_OP ConvertGFXBlendOpToD3D12(GFX_BLEND_OP blendOp)
	{
		switch(blendOp)
		{
			case GFX_BLEND_OP_ADD:
				return D3D12_BLEND_OP_ADD;
			case GFX_BLEND_OP_SUBTRACT:
				return D3D12_BLEND_OP_SUBTRACT;
			case GFX_BLEND_OP_REV_SUBTRACT:
				return D3D12_BLEND_OP_REV_SUBTRACT;
			case GFX_BLEND_OP_MIN:
				return D3D12_BLEND_OP_MIN;
			case GFX_BLEND_OP_MAX:
				return D3D12_BLEND_OP_MAX;
			default:
				return D3D12_BLEND_OP_ADD;
		}
	}

	inline D3D12_LOGIC_OP ConvertGFXLogicOpToD3D12(GFX_LOGIC_OP logicOp)
	{
		switch(logicOp)
		{
			case GFX_LOGIC_OP_CLEAR:
				return D3D12_LOGIC_OP_CLEAR;
			case GFX_LOGIC_OP_SET:
				return D3D12_LOGIC_OP_SET;
			case GFX_LOGIC_OP_COPY:
				return D3D12_LOGIC_OP_COPY;
			case GFX_LOGIC_OP_COPY_INVERTED:
				return D3D12_LOGIC_OP_COPY_INVERTED;
			case GFX_LOGIC_OP_NOOP:
				return D3D12_LOGIC_OP_NOOP;
			case GFX_LOGIC_OP_INVERT:
				return D3D12_LOGIC_OP_INVERT;
			case GFX_LOGIC_OP_AND:
				return D3D12_LOGIC_OP_AND;
			case GFX_LOGIC_OP_NAND:
				return D3D12_LOGIC_OP_NAND;
			case GFX_LOGIC_OP_OR:
				return D3D12_LOGIC_OP_OR;
			case GFX_LOGIC_OP_NOR:
				return D3D12_LOGIC_OP_NOR;
			case GFX_LOGIC_OP_XOR:
				return D3D12_LOGIC_OP_XOR;
			case GFX_LOGIC_OP_EQUIV:
				return D3D12_LOGIC_OP_EQUIV;
			case GFX_LOGIC_OP_AND_REVERSE:
				return D3D12_LOGIC_OP_AND_REVERSE;
			case GFX_LOGIC_OP_AND_INVERTED:
				return D3D12_LOGIC_OP_AND_INVERTED;
			case GFX_LOGIC_OP_OR_REVERSE:
				return D3D12_LOGIC_OP_OR_REVERSE;
			case GFX_LOGIC_OP_OR_INVERTED:
				return D3D12_LOGIC_OP_OR_INVERTED;
			default:
				return D3D12_LOGIC_OP_NOOP;
		}
	}

	inline u8 ConvertGFXColorWriteEnableToD3D12(u8 mask)
	{
		u8 res = 0;

		if(mask & COLOR_WRITE_ENABLE_RED)
		{
			res |= D3D12_COLOR_WRITE_ENABLE_RED;
		}
		if(mask & COLOR_WRITE_ENABLE_GREEN)
		{
			res |= D3D12_COLOR_WRITE_ENABLE_GREEN;
		}
		if(mask & COLOR_WRITE_ENABLE_BLUE)
		{
			res |= D3D12_COLOR_WRITE_ENABLE_BLUE;
		}
		if(mask & COLOR_WRITE_ENABLE_ALPHA)
		{
			res |= D3D12_COLOR_WRITE_ENABLE_ALPHA;
		}

		return res;
	}

	//-----------------------------------------------------------------------------------------------
	// Comparision function.
	//-----------------------------------------------------------------------------------------------

	inline D3D12_COMPARISON_FUNC ConvertGFXComparisionFuncToD3D12(COMPARISON_FUNC func)
	{
		switch(func)
		{
			case COMPARISON_FUNC_NEVER:
				return D3D12_COMPARISON_FUNC_NEVER;
			case COMPARISON_FUNC_LESS:
				return D3D12_COMPARISON_FUNC_LESS;
			case COMPARISON_FUNC_EQUAL:
				return D3D12_COMPARISON_FUNC_EQUAL;
			case COMPARISON_FUNC_LESS_EQUAL:
				return D3D12_COMPARISON_FUNC_LESS_EQUAL;
			case COMPARISON_FUNC_GREATER:
				return D3D12_COMPARISON_FUNC_GREATER;
			case COMPARISON_FUNC_NOT_EQUAL:
				return D3D12_COMPARISON_FUNC_NOT_EQUAL;
			case COMPARISON_FUNC_GREATER_EQUAL:
				return D3D12_COMPARISON_FUNC_GREATER_EQUAL;
			case COMPARISON_FUNC_ALWAYS:
				return D3D12_COMPARISON_FUNC_ALWAYS;
			default:
				return D3D12_COMPARISON_FUNC_NEVER;
		}
	}

	//-----------------------------------------------------------------------------------------------
	// Border color.
	//-----------------------------------------------------------------------------------------------

	inline D3D12_STATIC_BORDER_COLOR ConvertGFXBorderColorToD3D12(STATIC_BORDER_COLOR color)
	{
		switch(color)
		{
			case STATIC_BORDER_COLOR_TRANSPARENT_BLACK:
				return D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK;
			case STATIC_BORDER_COLOR_OPAQUE_BLACK:
				return D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK;
			case STATIC_BORDER_COLOR_OPAQUE_WHITE:
				return D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE;
			default:
				return D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK;
		}
	}

	//-----------------------------------------------------------------------------------------------
	// Primitive info.
	//-----------------------------------------------------------------------------------------------

	inline D3D12_INPUT_CLASSIFICATION ConvertInputClassToD3D12(INPUT_CLASSIFICATION inputClass)
	{
		switch(inputClass)
		{
			case Graphics::INPUT_PER_VERTEX_DATA:
				return D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA;
			case Graphics::INPUT_PER_INSTANCE_DATA:
				return D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA;
			default:
				return D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA;
		}
	}

	inline D3D_PRIMITIVE_TOPOLOGY ConvertPrimitiveTopologyToD3D12(PRIMITIVE_TOPOLOGY topology)
	{
		switch(topology)
		{
			case PRIMITIVE_TOPOLOGY_POINTLIST:
				return D3D_PRIMITIVE_TOPOLOGY_POINTLIST;
			case PRIMITIVE_TOPOLOGY_LINELIST:
				return D3D_PRIMITIVE_TOPOLOGY_LINELIST;
			case PRIMITIVE_TOPOLOGY_TRIANGLELIST:
				return D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST;
			case PRIMITIVE_TOPOLOGY_TRIANGLESTRIP:
				return D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP;

			case PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST:
				return D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST;
			case PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST:
				return D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST;
			case PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST:
				return D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST;
			case PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST:
				return D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST;

			default:
				return D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST;
		}
	}

	inline D3D12_PRIMITIVE_TOPOLOGY_TYPE ConvertPrimitiveTopologyToD3D12Type(PRIMITIVE_TOPOLOGY_TYPE topology)
	{
		switch(topology)
		{
			case Graphics::PRIMITIVE_TOPOLOGY_TYPE_POINTLIST:
				return D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT;
			case Graphics::PRIMITIVE_TOPOLOGY_TYPE_LINELIST:
				return D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE;
			case Graphics::PRIMITIVE_TOPOLOGY_TYPE_TRIANGLELIST:
				return D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE;
			case Graphics::PRIMITIVE_TOPOLOGY_TYPE_TRIANGLESTRIP:
				return D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE;
			case Graphics::PRIMITIVE_TOPOLOGY_TYPE_PATCH:
				return D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH;
			default:
				return D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE;
		}
	}

	inline D3D12_FILL_MODE ConvertFillModeToD3D12(FILL_MODE fillMode)
	{
		switch(fillMode)
		{
			case Graphics::FILL_MODE_WIREFRAME:
				return D3D12_FILL_MODE_WIREFRAME;
			case Graphics::FILL_MODE_SOLID:
			default:
				return D3D12_FILL_MODE_SOLID;
		}
	}

	inline D3D12_CULL_MODE ConvertCullModeToD3D12(CULL_MODE cullMode)
	{
		switch(cullMode)
		{
			case Graphics::CULL_MODE_NONE:
				return D3D12_CULL_MODE_NONE;
			case Graphics::CULL_MODE_BACK:
				return D3D12_CULL_MODE_BACK;
			case Graphics::CULL_MODE_FRONT:
			default:
				return D3D12_CULL_MODE_FRONT;
		}
	}

	inline D3D12_INPUT_ELEMENT_DESC* ConvertInputElemDescToD3D12(InputElementDesc* pInputLayout, size_t sz)
	{
		D3D12_INPUT_ELEMENT_DESC* list = new D3D12_INPUT_ELEMENT_DESC[sz];
		for(size_t i = 0; i < sz; ++i)
		{
			list[i].AlignedByteOffset = pInputLayout[i].alignedByteOffset;
			list[i].Format = ConvertGFXFormatToDXGI(pInputLayout[i].format);
			list[i].InputSlot = pInputLayout[i].inputSlot;
			list[i].InputSlotClass = ConvertInputClassToD3D12(pInputLayout[i].inputSlotClass);
			list[i].InstanceDataStepRate = pInputLayout[i].instanceDataStepRate;
			list[i].SemanticName = pInputLayout[i].pSemanticName;
			list[i].SemanticIndex = pInputLayout[i].semanticIndex;
		}

		return list;
	}

	//-----------------------------------------------------------------------------------------------
	// Shader info.
	//-----------------------------------------------------------------------------------------------

	inline D3D12_SHADER_VISIBILITY ConvertGFXShaderVisibilityToD3D12(SHADER_VISIBILITY visibility)
	{
		switch(visibility)
		{
			case Graphics::SHADER_VISIBILITY_ALL:
				return D3D12_SHADER_VISIBILITY_ALL;
			case Graphics::SHADER_VISIBILITY_VERTEX:
				return D3D12_SHADER_VISIBILITY_VERTEX;
			case Graphics::SHADER_VISIBILITY_HULL:
				return D3D12_SHADER_VISIBILITY_HULL;
			case Graphics::SHADER_VISIBILITY_DOMAIN:
				return D3D12_SHADER_VISIBILITY_DOMAIN;
			case Graphics::SHADER_VISIBILITY_GEOMETRY:
				return D3D12_SHADER_VISIBILITY_GEOMETRY;
			case Graphics::SHADER_VISIBILITY_PIXEL:
				return D3D12_SHADER_VISIBILITY_PIXEL;
			default:
				return D3D12_SHADER_VISIBILITY_ALL;
		}
	}

	//-----------------------------------------------------------------------------------------------
	// Root signature info.
	//-----------------------------------------------------------------------------------------------

	inline D3D12_ROOT_SIGNATURE_FLAGS ConvertGFXRootSignatureFlagsToD3D12(ROOT_SIGNATURE_FLAGS flags)
	{
		D3D12_ROOT_SIGNATURE_FLAGS dxFlags = D3D12_ROOT_SIGNATURE_FLAG_NONE;

		if(flags & ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT)
		{
			dxFlags |= D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT;
		}
		if(flags & ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS)
		{
			dxFlags |= D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS;
		}
		if(flags & ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS)
		{
			dxFlags |= D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS;
		}
		if(flags & ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS)
		{
			dxFlags |= D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS;
		}
		if(flags & ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS)
		{
			dxFlags |= D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS;
		}
		if(flags & ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS)
		{
			dxFlags |= D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS;
		}
		if(flags & ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT)
		{
			dxFlags |= D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT;
		}
		if(flags & ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE)
		{
			dxFlags |= D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE;
		}
		if(flags & ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS)
		{
			dxFlags |= D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS;
		}
		if(flags & ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS)
		{
			dxFlags |= D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS;
		}
		if(flags & ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED)
		{
			dxFlags |= D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED;
		}
		if(flags & ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED)
		{
			dxFlags |= D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED;
		}

		return dxFlags;
	}

	inline D3D12_ROOT_PARAMETER_TYPE ConvertGFXRootParameterTypeToD3D12(ROOT_PARAMETER_TYPE param)
	{
		switch(param)
		{
			case ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE:
				return D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE;
			case ROOT_PARAMETER_TYPE_32BIT_CONSTANTS:
				return D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS;
			case ROOT_PARAMETER_TYPE_CBV:
				return D3D12_ROOT_PARAMETER_TYPE_CBV;
			case ROOT_PARAMETER_TYPE_SRV:
				return D3D12_ROOT_PARAMETER_TYPE_SRV;
			case ROOT_PARAMETER_TYPE_UAV:
				return D3D12_ROOT_PARAMETER_TYPE_UAV;
			default:
				return D3D12_ROOT_PARAMETER_TYPE_CBV;
		}
	}

	inline D3D12_ROOT_DESCRIPTOR_FLAGS ConvertGFXRootDescriptorFlagsToD3D12(ROOT_DESCRIPTOR_FLAGS flags)
	{
		D3D12_ROOT_DESCRIPTOR_FLAGS dxFlags = D3D12_ROOT_DESCRIPTOR_FLAG_NONE;

		if(flags & ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE)
		{
			dxFlags |= D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE;
		}
		if(flags & ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE)
		{
			dxFlags |= D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE;
		}
		if(flags & ROOT_DESCRIPTOR_FLAG_DATA_STATIC)
		{
			dxFlags |= D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC;
		}

		return dxFlags;
	}

	inline D3D12_DESCRIPTOR_RANGE_FLAGS ConvertGFXDescriptorRangeFlagsToD3D12(DESCRIPTOR_RANGE_FLAGS flags)
	{
		D3D12_DESCRIPTOR_RANGE_FLAGS dxFlags = D3D12_DESCRIPTOR_RANGE_FLAG_NONE;

		if(flags & DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE)
		{
			dxFlags |= D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE;
		}
		if(flags & DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE)
		{
			dxFlags |= D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE;
		}
		if(flags & DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE)
		{
			dxFlags |= D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE;
		}
		if(flags & DESCRIPTOR_RANGE_FLAG_DATA_STATIC)
		{
			dxFlags |= D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC;
		}
		if(flags & DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS)
		{
			dxFlags |= D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS;
		}

		return dxFlags;
	}

	inline D3D12_DESCRIPTOR_RANGE_TYPE ConvertGFXDescriptorRangeType(DESCRIPTOR_RANGE_TYPE type)
	{
		switch(type)
		{
			case DESCRIPTOR_RANGE_TYPE_SRV:
				return D3D12_DESCRIPTOR_RANGE_TYPE_SRV;
			case DESCRIPTOR_RANGE_TYPE_UAV:
				return D3D12_DESCRIPTOR_RANGE_TYPE_UAV;
			case DESCRIPTOR_RANGE_TYPE_CBV:
				return D3D12_DESCRIPTOR_RANGE_TYPE_CBV;
			case DESCRIPTOR_RANGE_TYPE_SAMPLER:
				return D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER;
			default:
				return D3D12_DESCRIPTOR_RANGE_TYPE_CBV;
		}
	}

	//-----------------------------------------------------------------------------------------------
	// Utilities.
	//-----------------------------------------------------------------------------------------------

	// Assign a name to the object to aid with debugging.
#if defined(_DEBUG) || defined(DBG)
	inline void SetName(ID3D12Object* pObject, LPCWSTR name)
	{
		pObject->SetName(name);
	}

	inline void SetNameIndexed(ID3D12Object* pObject, LPCWSTR name, UINT index)
	{
		WCHAR fullName[50];
		if(swprintf_s(fullName, L"%s[%u]", name, index) > 0)
		{
			pObject->SetName(fullName);
		}
	}
#else
	inline void SetName(ID3D12Object*, LPCWSTR) { }
	inline void SetNameIndexed(ID3D12Object*, LPCWSTR, UINT) { }
#endif

#define NAME_D3D12_OBJECT(x) SetName(x, L#x)
#define NAME_D3D12_OBJECT_INDEXED(x, n) SetNameIndexed((x)[n], L#x, n)
};

#endif
